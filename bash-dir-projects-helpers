#!/bin/bash
# Utils to manage project symlinks
# padd (add project symlink)
# prm  (remove)
# pcd  (change to project dir)
. ansi.sh

if [[ -z "${handydir_base+is_set}" ]]; then
	handydir_base=~/prj
fi

padd () {
	local pdir
	local cmtu=''  # User comment
	local cmt=''
	local ans
	local done=0
	if [[ "$#" -lt 1 ]]; then
		pdirreal=$(readlink "$PWD")
		if [[ "$pdirreal" = '' ]]; then pdirreal="$PWD"; fi # dir is same
		pdir=${PWD,,}
		pdirp=${pdir##*/}
		echo
		echo "Adding new project: $yele$pdirp$rste"
		echo "          Dest dir: $yele$pdirreal$rsete"
		local shortcut="$pdirp--"
		while [[ $done = 0 ]]; do
			local prompt='Modify shortcut: \[${bgree}\]'
			read -e -i "$shortcut" -p "${prompt@P}" shortcut
			echo -n "$rste"
			if [[ $shortcut = '' ]]; then
				echo "${brede}Empty string not allowed$rste" >&2
				break
			else
				shortcut=${shortcut//[[:space:]\/\"]/_} # space, slash, "
			fi
			local fin="$shortcut"
			echo
			echo "We're going to add '$yele$fin$rste' as a project."
				cat <<-EOT
					Linking:
						ln -s "$yele$pdirreal$rste" "$bmage$handydir_base/$fin$rste"
				EOT
			read -p "Okay (Y/n)? " ans
			if [[ ! "$ans" =~ ^[Yy]?$ ]]; then
				echo "No?  ${yele}Try again or Ctrl-C to quit$rste"
			else
				ln -s "$pdirreal" "$handydir_base/$fin"
				done=1
			fi
		done
	fi
}

prm () {
	pushd
	local cwd=$PWD
	cd "$handydir_base" && {
		if [[ "$#" -gt 1 ]]; then 
			echo
			echo "We're in $handydir_base."
			echo "We're going to REMOVE $brede'$1'$rste"
			read -p "Okay (y/N)? " ans
			if [[ "$ans" =~ ^[Yy] ]]; then
				echo "Removing: $1 (dry run still)"
				echo "rm '$1'"
			fi
		fi
	}
	popd
}

pcd () {
	local re
	# echo "CHDIR($handydir_base)"
	# echo "Completion arg 1: $1"
	# echo "Completion arg 2: $2"
	local match="$1"
	local items
	local finaldir
	pushd "$handydir_base" && {
		if [[ "$match" = '' ]]; then re=".*"; else re=".*$match.*"; fi
		# echo "re        : $re"
		# echo "find (vis): find . -type l -regex "$re" -printf '%TY-%Tm-%Td--%TH:%TM %p\n'"
		# find . -type l -regex "$re" \
		#                                -printf '%TY-%Tm-%Td--%TH:%TM %p\n' |
		#                                   sort -rnz
		# return
		mapfile -td '' items < <(find . -type l -regex "$re" \
		                               -printf '%TY-%Tm-%Td--%TH:%TM %p\0' |
		                                  sort -rnz | "${fzf_cmd[@]}" -q "$match")
		# echo "FZF replies:"
		# printf ' %s\n' "${items[@]}"
		# return
		if [[ "${#items}" -gt 0 ]]; then
			local ddir=${items[0]}
			ddir=$(printf '%s' "$ddir" | sed -e 's/^[^ ]* //')
			echo
			echo "Changing to project: $ddir"
			finaldir="$ddir"
			cd -P "$ddir"
			# items=("$ddir")
			# local ddirreal=$(readlink "$ddir")
			# if [[ "$ddirreal" != '' ]]; then
			# 	COMPREPLY=("$ddirreal")
			# else
			# 	COMPREPLY=("$ddir")
			# fi
		fi
	}
	popd
	[[ -n $finaldir ]] && cd -P "$handydir_base/$finaldir"
}

pcdt () {
	cd "$handydir_base" && {
		if [[ "$#" -gt 0 ]]; then 
			cd -P "$1"
		fi
	}
}

phelp () {
	cat <<-'EOT'
		Bash shell dir helper command reference:
		* padd: Add current directory as a project
		* pcd:  Search/change to project
		* pquery: Examine projects to see if current dir tree already exists
		EOT
}

pquery () { # Query current
	local dir
	if [[ $# -gt 2 ]]; then dir=$1; else dir=$PWD; fi
	echo "Link base: $handydir_base"
	echo "Current directory we're checking: $dir"
	local path=$(realpath "$dir")
	local color_mat=''
	local color_rst=''
	if [[ -t 1 ]]; then
		color_mat="$yele"; color_rst="$rste";
	fi
	local first_match=''
	local original_dir=$PWD
	echo "  Expanded path: $path"
	{
		( cd "$handydir_base" && {
			while true; do
				echo "  Checking path: $path"
				readarray -t matches < <(
					find . -type l -printf '%f\000' | while read -r -d $'\0' f; do
						# echo "    -> $f"
						local fl=$(readlink -f "$f")
						if [[ "$fl" = *$path* ]]; then
							printf '%s\n' "$f"
							# echo "    Match: $fl" > /dev/tty
							# echo "      Project name: $f"
						fi
					done
				)
				# echo "Match count: ${#matches[@]}"
				# [[ ${#matches[@]} -gt 0 && -z $first_match ]] && first_match=${matches[0]}
				if [[ ${#matches[@]} -gt 2 ]]; then
					pat="${matches[0]}"
					echo "    Match: $color_mat$pat$color_rst"
					echo "           -> $(readlink -f "$pat")"
					echo "    ... ${#matches[@]} total matches for this path"
				else
					for pat in "${matches[@]}"; do
						echo "    Match: $color_mat$pat$color_rst"
						echo "           -> $(readlink -f "$pat")"
					done
				fi
				path=${path%/*}
				if [[ $path != */* ]]; then break; fi
			done
		} ) 
	}
}

# --preview-window=
export fzf_preview_lines=20 # Export for expansion in the --preview cmd
export fzf_preview_height='80%' # Export for expansion in the --preview cmd
fzf_height='100%'
fzf_base_cmd=(fzf +s +m --exact --tiebreak=end --no-sort --no-multi
	  --color='bg+:#002000,info:#BDBB72,border:#6B6B6B,spinner:#98BC99'
	  --color='hl:#f19892,fg:#D9D9D9,header:#719872,fg+:#D9D9D9'
	  --color='pointer:#E12672,marker:#E17899,prompt:#98BEDE,hl+:#f8BC99'
	  --read0 --print0 --border
)
fzf_cmd=("${fzf_base_cmd[@]}"
	--delimiter=$' '
	--preview='cd -P {2..} && { echo -e "\\033[1;36;1m"$(pwd)"\\033[m"; ls -lGgt | tail -n +2 | head -$fzf_preview_lines | sed -e "s/^/ /"; }'
	--height="$fzf_height"
	--preview-window=top:$fzf_preview_height)

_pcdt_complete() {
	local re
	# echo "CHDIR($handydir_base)"
	# echo "Completion arg 2: $2"
	local match="$2"
	cd "$handydir_base" && {
		if [[ "$match" = '' ]]; then re=".*"; else re=".*$match.*"; fi
		# echo "re        : $re"
		# echo "find (vis): find . -type l -regex "$re" -printf '%TY-%Tm-%Td--%TH:%TM %p\n'"
		# mapfile -td '' COMPREPLY < <(find . -type l -regex "$re" \
		#                                -printf '%TY-%Tm-%Td--%TH:%TM %p\0' |
		#                                   sort -rnz | "${fzf_cmd[@]}" -q "$match")
		# find . -type l -regex "$re" \
		#                                -printf '%TY-%Tm-%Td--%TH:%TM %p\0' |
		#                                   sort -rnz | sed -ze 's#^[^ ]* \./##; s/$/\n/;'
		# echo
		# \/ printf stuff for sorting output from find
		mapfile -td '' COMPREPLY < <(find . -type l -regex "$re" \
		                               -printf '%TY-%Tm-%Td--%TH:%TM %p\0' |
										  sort -rnz | sed -ze 's#^[^ ]* \./##;')
	}
}
complete -F _pcdt_complete pcdt
alias project_dir_pcd_padd='echo "Use pcd, padd, prm'
